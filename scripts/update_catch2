#!/bin/bash

## Set Script Options
set -o errexit
set -o pipefail
set -o nounset

## Variables
declare -g update_catch2_DIR
update_catch2_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
# shellcheck source=scripts/lib/lib.sh
. "${update_catch2_DIR}/lib/lib.sh"

declare -g project_source_DIR
project_source_DIR="$(dirname "${update_catch2_DIR}")"

## Functions
################################################################################
# Determines the currently installed version of Catch2 and compares it to the
# most up-to-date upstream release.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   String containing the fetched Catch2 version.
################################################################################
function __get_catch2_version_remote() {
  curl --silent "https://api.github.com/repos/catchorg/catch2/releases/latest" \
    | grep '"tag_name":' \
    | sed -E 's/.*"([^"]+)".*/\1/'
}
function __get_catch2_version_local() {
  awk -e \
    '/^#define CATCH_VERSION.*/ { print $0 }' \
    "${project_source_DIR}/include/catch2/catch.hpp" \
    | sed -e 's/\<[a-zA-Z]\>//g' \
    | awk '{ print $3 }' \
    | paste -s -d '.'
}

function compare_catch2_versions() {
  declare catch2_local_version
  catch2_local_version="$(__get_catch2_version_local)"

  declare catch2_remote_version
  catch2_remote_version="$(__get_catch2_version_remote)"

  if [[ "${catch2_local_version}" == "${catch2_remote_version}" ]]; then
    __log_msg -s "Catch2 already up to date."
    exit 0
  fi
}

# BEGIN SCRIPT
cd "${project_source_DIR}"

__log_msg -i -m 'updating submodules...'
git submodule foreach git pull

__log_msg -m 'going to catch2 dir' -i
cd "${project_source_DIR}/share/catch2"

if [[ -d "${project_source_DIR}/share/catch2/build" ]]; then
  rm -rf "${project_source_DIR}/share/catch2/build"
  mkdir -p "${project_source_DIR}/share/catch2/build"
else
  mkdir -p "${project_source_DIR}/share/catch2/build"
fi

cmake '-Bbuild' '-H.' \
  '-DBUILD_TESTING=OFF' \
  '-DCATCH_BUILD_EXAMPLES=OFF' \
  '-DCATCH_BUILD_TESTING=OFF' \
  '-DCATCH_INSTALL_DOCS=OFF' \
  '-DCATCH_INSTALL_HELPERS=on'
sudo cmake --build build/ --target install

rm -rf "${project_source_DIR}/share/catch2/build"

__log_msg -s -m 'Install complete.'
cd "${project_source_DIR}"

# declare delete_this_config_string
# delete_this_config_string='\"\$\{CMAKE_CURRENT_LIST_DIR\}\/..\/..\/..\/\"'
# use_this_config_string='\"\$\{CMAKE_CURRENT_LIST_DIR\}\/..\/..\/\"'
# declare delete_this_target_line
# delete_this_target_line='get_filename_component(_IMPORT_PREFIX \"\$\{_IMPORT_PREFIX\}\" PATH\)'

# sed -i \
  # "s/${delete_this_config_string}/${use_this_config_string}/g" \
  # "${project_source_DIR}/cmake/Catch2/Catch2Config.cmake"

# declare count
# count=0
# for ((i = 1; i < count + 1; i++)); do
# sed -n "/${delete_this_target_line}/q;p" \
    # "${project_source_DIR}/cmake/Catch2/Catch2Targets.cmake"

# done

# rm -rf "${project_source_DIR:?}/lib"
# rm -rf "${project_source_DIR:?}/share"

# cd "${prev_DIR}"

# Delete temp dir
# rm -rf "${temp_DIR}"

# Unset script options
set -u errexit
set -u pipefail
set -u nounset

exit 0
